@page "/customers/edit/{ID:int?}"
@using FuelStation.Model
@using FuelStation.Blazor.Shared
@inject HttpClient ReqClient
@inject NavigationManager NavManager

<PageTitle>Fuel Station - Customer</PageTitle>

@if (CustomerItem is null)
{
    <p>Loading ...</p>
}
else
{
    @if (Id == 0)
    {
        <h2>Add new customer</h2>
    }
    else
    {
        <h2>Edit @($"{CustomerItem.Surname} {CustomerItem.Name}")</h2>
    }
    @if (_showingErrorMessages)
    {
        <div class="row">
            <div class="alert alert-info" role="alert">
                <p>There was an error with the input fields.</p>
                <p>Please make sure that you have enter all the values correctly.</p>
            </div>
        </div>
    }
    <div class="row">
        <div class="col-md-8">
            <label for="customer-card">Card Number</label>
            <input id="customer-card" pattern="A\d+" name="customer-card" class="form-control" @bind="@CustomerItem.CardNumber" placeholder="Customer Card Number" />
        </div>
    </div>
    <div class="row">
        <div class="col-md-6">
            <label for="customer-surname">Surname</label>
            <input id="customer-surname" name="customer-surname" class="form-control" @bind="@CustomerItem.Surname" placeholder="Customer Surname" />
        </div>
        <div class="col-md-6">
            <label for="customer-name">Name</label>
            <input id="customer-name" name="customer-name" class="form-control" @bind="@CustomerItem.Name" placeholder="Customer Name" />
        </div>
    </div>
    <div class="row mt-2">
        <div class="col-md-6">
            <button class="btn btn-success" @onclick="OnSave">Save</button>
            <button class="btn btn-danger" @onclick="OnCancel">Cancel</button>
        </div>
    </div>

}

@code {
    [Parameter] public int? Id { get; set; }
    private CustomerEditViewModel? CustomerItem { get; set; } = new();
    private bool _showingErrorMessages = false;

    protected override async Task OnInitializedAsync()
    {
        Id ??= 0;
        CustomerItem = await ReqClient.GetFromJsonAsync<CustomerEditViewModel>($"customer/{Id}");
    }

    protected async Task OnSave()
    {
        if (CustomerItem != null && (string.IsNullOrEmpty(CustomerItem.CardNumber) ||
                                     string.IsNullOrEmpty(CustomerItem.Surname) ||
                                     string.IsNullOrEmpty(CustomerItem.Name) ||
                                     !CustomerItem.CardNumber.StartsWith("A")))
        {
            _showingErrorMessages = true;
            return;
        }

        HttpResponseMessage response;
        if (Id == 0)
        {
            response = await ReqClient.PostAsJsonAsync("customer", CustomerItem);
        }
        else
        {
            response = await ReqClient.PutAsJsonAsync("customer", CustomerItem);
        }
        response.EnsureSuccessStatusCode();
        NavManager.NavigateTo("customers");
    }

    protected void OnCancel()
    {
        NavManager.NavigateTo("customers");
    }
}
